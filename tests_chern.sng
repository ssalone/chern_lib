    LIB "chern.lib";
LIB "lrcalc.lib";
int REZ=1;
proc fail(string s)
{
  return("Failed in "+s);
}

proc check(string s)
{
  if(!REZ)
  {
    fail(s);
    REZ=1;
    return(0);
  }
  else
  {
    return(1);
  }
}

proc ensure(int b)
{
  if(b)
  {
//    return(1);
  }
  else
  {
    REZ=0;
//    return(0);
  }
}


proc test_symm()
{
  string s="symm()";
  // elementary symmetric functions in x, y, z:
  ring r = 0, (x, y, z), dp;
  list l=(x, y, z);
  list rez=symm(l);
  ensure(rez[1] == x+y+z);
  ensure(rez[2] ==  xy+xz+yz);
  ensure(rez[3] ==  xyz);

  //now let us compute only the first two symmetric polynomials in a(1), ... , a(10)
  ring q= 0,(a(1..10)), dp;
  list l=a(1..10);
  list rez=symm(l, 2);

  ensure(rez[1]== a(1)+a(2)+a(3)+a(4)+a(5)+a(6)+a(7)+a(8)+a(9)+a(10));
  ensure(rez[2]== a(1)*a(2)+a(1)*a(3)+a(2)*a(3)+a(1)*a(4)+a(2)*a(4)+a(3)*a(4)+a(1)*a(5)+a(2)*a(5)+a(3)*a(5)+a(4)*a(5)+a(1)*a(6)+a(2)*a(6)+a(3)*a(6)+a(4)*a(6)+a(5)*a(6)+a(1)*a(7)+a(2)*a(7)+a(3)*a(7)+a(4)*a(7)+a(5)*a(7)+a(6)*a(7)+a(1)*a(8)+a(2)*a(8)+a(3)*a(8)+a(4)*a(8)+a(5)*a(8)+a(6)*a(8)+a(7)*a(8)+a(1)*a(9)+a(2)*a(9)+a(3)*a(9)+a(4)*a(9)+a(5)*a(9)+a(6)*a(9)+a(7)*a(9)+a(8)*a(9)+a(1)*a(10)+a(2)*a(10)+a(3)*a(10)+a(4)*a(10)+a(5)*a(10)+a(6)*a(10)+a(7)*a(10)+a(8)*a(10)+a(9)*a(10));
  return(check(s));

}

proc test_symNsym()
{
  string s="symNsym()";
  ring r=0, (x,y,z, c(1..3)), dp;
  list l=c(1..3);
  // The symmetric part of f = 3x2 + 3y2 + 3z2 + 7xyz + y
  // in terms of the elemenatary symmetric functions c(1), c(2), c(3)
  // and the remainder
  poly f = 3x2 + 3y2 + 3z2 + 7xyz + y;
  list rez= symNsym(f, l);
  ensure(rez[1]== 3*c(1)^2-6*c(2)+7*c(3));
  ensure(rez[2]==  y);
  // Take a symmetrix polynomial in variables x and z
  f=x2+xz+z2;
  // Express it in terms of the elementary the symmetric functions
  rez= symNsym(f, l);
  ensure(rez[1]==c(1)^2-c(2));
  ensure(rez[2]==0);
  return(check(s));
}

proc test_CompleteHomog()
{
  string s= "CompleteHomog()";
  ring r = 0, (x(1..3)), dp;
  list l=x(1..3);
  //Complete homogeneous symmetric polynomials up to degree 3 in variables x(1), x(2), x(3)
  list rez= CompleteHomog(3, l) ;
  ensure(rez[1]==1);
  ensure(rez[2]==x(1));
  ensure(rez[3]== x(1)^2-x(2));
  ensure(rez[4]== x(1)^3-2*x(1)*x(2)+x(3));
  return(check(s));
}

proc test_segre()
{
  string s="segre()";
  ring r = 0, (c(1..3)), dp;
  list l=c(1..3);
  //Segre classes up to degree 5 in Chern classes c(1), c(2), c(3)
  list rez= segre(l, 5);
  ensure( rez[1] == -c(1));
  ensure( rez[2] == c(1)^2-c(2));
  ensure( rez[3] == -c(1)^3+2*c(1)*c(2)-c(3));
  ensure( rez[4] ==  c(1)^4-3*c(1)^2*c(2)+c(2)^2+2*c(1)*c(3));
  ensure(rez[5] == -c(1)^5+4*c(1)^3*c(2)-3*c(1)*c(2)^2-3*c(1)^2*c(3)+2*c(2)*c(3));
  return(check(s));

}


proc test_chern()
{
  string s="chern()";
  ring r = 0, (s(1..3)), dp;
  list l=s(1..3);
  // Chern classes in Segre classes s(1), s(2), s(3)
  list rez= chern(l);
  ensure(rez[1]==   -s(1));
  ensure(rez[2]==   s(1)^2-s(2));
  ensure(rez[3]==  -s(1)^3+2*s(1)*s(2)-s(3));
  // This procedure is inverse to segre(...). Indeed:
  rez=segre(chern(l), 3) ;
  ensure(rez[1]==  s(1));
  ensure(rez[2]==   s(2));
  ensure(rez[3]==   s(3));
  return(check(s));

}
proc test_chNum()
{
  string s="chNum()";
  ring r = 0, (c(1..2)), dp;
  list l=c(1..2);
  // Let c(1) be a variable of degree 1, let c(2) be a variable of degree 2.
  // The monomials in c(1) and c(2) of weighted degree 5 are:
  list rez= chNum( 5, l ) ;
  ensure(rez[1]==   c(1)^5);
  ensure(rez[2]==   c(1)^3*c(2));
  ensure(rez[3]==   c(1)*c(2)^2);
  return(check(s));
}

proc test_chNumbers()
{
  string s= "chNumbers()";
  ring r = 0, (c(1..3)), dp;
  list l=c(1..3);
  // The Chern numbers of a vector bundle with Chern classes c(1), c(2), c(3)
  // on a 3-fold:
  list rez= chNumbers( 3, l );
  ensure(rez[1] ==  c(1)^3);
  ensure(rez[2]==    c(1)*c(2));
  ensure(rez[3]==   c(3));
  // If the highest Chern class is zero, the Chern numbers are:
  l=c(1..2);
  rez= chNumbers( 3, l );
  ensure(rez[1]==   c(1)^3);
  ensure(rez[2]== c(1)*c(2));
  ensure(rez[3]==   0);
  return(check(s));
}

proc test_sum_of_powers()
{
  string s="sum_of_powers()";
  ring r = 0, (x, y, z), dp;
  list l=x, y, z;
  //sum of 7-th powers of x, y, z
  poly rez= sum_of_powers(7, l);
  ensure( rez==x7+y7+z7 );
  return(check(s));

}

proc test_powSumSym()
{
  string  s= "powSumSym()";

  // the expressions of the first 3 sums of powers of 3 variables a(1), a(2), a(3)
  // in terms of the elementary symmetric polynomials c(1), c(2), c(3):
  ring r = 0, (c(1..3)), dp;
  list l=(c(1..3));
  list rez=powSumSym(l);
  ensure(rez[1]==  c(1) );
  ensure(rez[2]==  c(1)^2-2*c(2)) ;
  ensure(rez[3]==   c(1)^3-3*c(1)*c(2)+3*c(3));
  
  // The first 5 sums in the same situation
  rez= powSumSym(l, 5);
  ensure(rez[1]==   c(1));
  ensure(rez[2]==  c(1)^2-2*c(2));
  ensure(rez[3]==   c(1)^3-3*c(1)*c(2)+3*c(3));
  ensure(rez[4]==   c(1)^4-4*c(1)^2*c(2)+2*c(2)^2+4*c(1)*c(3) );
  ensure(rez[5]==   c(1)^5-5*c(1)^3*c(2)+5*c(1)*c(2)^2+5*c(1)^2*c(3)-5*c(2)*c(3));
  return(check(s));
}

proc test_chAll()
{
  string s="chAll()";
  // Chern character (terms of degree 1, 2, 3)
  // corresponding to the Chern classes c(1), c(2), c(3):
  ring r = 0, (c(1..3)), dp;
  list l=(c(1..3));
  list rez= chAll(l);
  ensure(rez[1]==   c(1));
  ensure(rez[2]==   1/2*c(1)^2-c(2));
  ensure(rez[3]==   1/6*c(1)^3-1/2*c(1)*c(2)+1/2*c(3));
  // terms up to degree 5 in the same situation
  rez=chAll(l, 5);
  ensure(rez[1]==   c(1));
  ensure(rez[2]==   1/2*c(1)^2-c(2));
  ensure(rez[3]==   1/6*c(1)^3-1/2*c(1)*c(2)+1/2*c(3));
  ensure(rez[4]==   1/24*c(1)^4-1/6*c(1)^2*c(2)+1/12*c(2)^2+1/6*c(1)*c(3));
  ensure(rez[5]==   1/120*c(1)^5-1/24*c(1)^3*c(2)+1/24*c(1)*c(2)^2+1/24*c(1)^2*c(3)-1/24*c(2)*c(3));
  return(check(s));

}

proc test_chAllInv()
{
  string s="chAllInv()";
  // first 3 Chern classes in terms of the first 3 terms
  // of the Chern character Chern  ch(1), ch(2), ch(3):
  ring r = 0, (ch(1..3)), dp;
  list l=(ch(1..3));
  list rez= chAllInv(l);
  ensure(rez[1]==   ch(1));
  ensure(rez[2]==   1/2*ch(1)^2-ch(2));
  ensure(rez[3]==   1/6*ch(1)^3-ch(1)*ch(2)+2*ch(3));
  // let's see that chAllInv() is inverse to chAll()
  rez=chAll( chAllInv(l) ) ;
  ensure(rez[1]==   ch(1));
  ensure(rez[2]==   ch(2));
  ensure(rez[3]==   ch(3));
  return(check(s));
}

proc test_chHE()
{
  string s="chHE()"; 
  ring r = 0, (c(1..3)), dp;
  list l=c(1..3);
  //the third degree term of the Chern character
  poly rez= chHE(l);
  ensure(rez== 1/6*c(1)^3-1/2*c(1)*c(2)+1/2*c(3));
  return(check(s));
}


proc test_ChernRootsSum()
{
  string s="ChernRootsSum()";
  ring r = 0, (a(1..3), b(1..2)), dp;
  // assume a(1), a(2), a(3) are the Chern roots of a vector bundle E
  // assume b(1), b(2) are the Chern roots of a vector bundle F
  list l=a(1..3);
  list L=b(1..2);
  // the Chern roots of their direct sum is
  list rez= ChernRootsSum(l, L);
  ensure(rez[1]== a(1));
  ensure(rez[2]== a(2));
  ensure(rez[3]== a(3));
  ensure(rez[4]== b(1));
  ensure(rez[5]== b(2));
  return(check(s));
}

proc test_chSum()
{
  string s="chSum()";
  ring r = 0, (c(1..3), C(1..2)), dp;
  // Let E be a vector bundle with Chern classes c(1), c(2), c(3).
  // Let F be a vector bundle with Chern classes C(1), C(2).
  list l=c(1..3);
  list L=C(1..2);
  // Then the Chern classes of their direct sum are
  list rez= chSum(l, L);
  ensure(rez[1]== c(1)+C(1));
  ensure(rez[2]== c(1)*C(1)+c(2)+C(2));
  ensure(rez[3]== c(2)*C(1)+c(1)*C(2)+c(3));
  ensure(rez[4]== c(3)*C(1)+c(2)*C(2));
  ensure(rez[5]== c(3)*C(2));
  return(check(s));

}

proc test_ChernRootsDual()
{
  string s="ChernRootsDual()";
  ring r = 0, (a(1..3)), dp;
  // assume a(1), a(2), a(3) are the Chern roots of a vector bundle
  list l=a(1..3);
  // the Chern roots of the dual vector bundle
  list rez=ChernRootsDual(l);
  ensure(rez[1]==   -a(1));
  ensure(rez[2]==  -a(2));
  ensure(rez[3]==  -a(3));
  return(check(s));
}

proc test_chDual()
{
  string s="chDual()";
  // Chern classes of a vector bundle that is dual to a vector bundle
  // with Chern classes c(1), c(2), c(3)
  ring r=0, (c(1..3)), dp;
  list l=c(1..3);
  list rez=chDual(l);
  ensure(rez[1]== -c(1));
  ensure(rez[2]==   c(2));
  ensure(rez[3]==  -c(3));

  return(check(s));
}

proc test_ChernRootsProd()
{
  string s="ChernRootsProd()";
  ring r=0, (a(1..2), b(1..3)), dp;
  list l=a(1..2);
  list L=b(1..3);
  // Chern roots of the tensor product of a vector bundle with Chern roots a(1), a(2)
  // and a vector bundle with Chern roots b(1), b(2), b(3)
  list rez= ChernRootsProd(l, L);
  ensure(rez[1]==   a(1)+b(1));
  ensure(rez[2]==    a(1)+b(2));
  ensure(rez[3]==   a(1)+b(3));
  ensure(rez[4]==   a(2)+b(1));
  ensure(rez[5]==  a(2)+b(2));
  ensure(rez[6]==   a(2)+b(3));
  return(check(s));
}

proc test_chProd()
{
  string s="chProd";
  ring H = 0, ( r, R, c(1..3), C(1..2) ), dp;
  list l=c(1..3);
  list L=C(1..2);
  // the Chern classes of the tensor product of a vector bundle E of rank 3
  // with Chern classes c(1), c(2), c(3)
  // and a vector bundle F of rank 2 with Chern classes C(1) and C(2):
  list rez= chProd(3, l, 2, L) ;
  ensure(rez[1]==   2*c(1)+3*C(1));
  ensure(rez[2]==  c(1)^2+5*c(1)*C(1)+3*C(1)^2+2*c(2)+3*C(2));
  ensure(rez[3]==   2*c(1)^2*C(1)+4*c(1)*C(1)^2+C(1)^3+2*c(1)*c(2)+4*c(2)*C(1)+4*c(1)*C(2)+6*C(1)*C(2)+2*c(3));
  ensure(rez[4]==  c(1)^2*C(1)^2+c(1)*C(1)^3+3*c(1)*c(2)*C(1)+3*c(2)*C(1)^2+2*c(1)^2*C(2)+6*c(1)*C(1)*C(2)+3*C(1)^2*C(2)+c(2)^2+2*c(1)*c(3)+3*c(3)*C(1)+3*C(2)^2);
  ensure(rez[5]==  c(1)*c(2)*C(1)^2+c(2)*C(1)^3+2*c(1)^2*C(1)*C(2)+2*c(1)*C(1)^2*C(2)+c(2)^2*C(1)+2*c(1)*c(3)*C(1)+3*c(3)*C(1)^2+2*c(1)*c(2)*C(2)+2*c(1)*C(2)^2+3*C(1)*C(2)^2+2*c(2)*c(3)-6*c(3)*C(2));
  ensure(rez[6]==  c(1)*c(3)*C(1)^2+c(3)*C(1)^3+c(1)*c(2)*C(1)*C(2)+c(2)*C(1)^2*C(2)+c(1)^2*C(2)^2+c(1)*C(1)*C(2)^2+c(2)*c(3)*C(1)+c(2)^2*C(2)-2*c(1)*c(3)*C(2)-3*c(3)*C(1)*C(2)-2*c(2)*C(2)^2+C(2)^3+c(3)^2);
  // the first two Chern classes of the tensor product
  // of a vector bundle E of rank r with Chern classes c(1) and c(2)
  // and a vector bundle G of rank R with Chern classes C(1) and C(2)
  // this gives the Chern classes of a tensor product on a complex surface
  l=c(1..2);
  L=C(1..2);
  rez= chProd(r, l, R, L, 2 );
  ensure(rez[1]==   R*c(1)+r*C(1));
  ensure(rez[2]==   1/2*R^2*c(1)^2+r*R*c(1)*C(1)+1/2*r^2*C(1)^2-1/2*R*c(1)^2-1/2*r*C(1)^2+R*c(2)-c(1)*C(1)+r*C(2));
  return(check(s));

}

proc test_chProdE()
{
  string s="chProdE()";
  ring H = 0, ( c(1..3), C(1..2) ), dp;
  list l=c(1..3);
  list L=C(1..2);
  // the Chern classes of the tensor product of a vector bundle E of rank 3
  // with Chern classes c(1), c(2), c(3)
  // and a vector bundle F of rank 2 with Chern classes C(1) and C(2):
  list rez= chProdE(l,  L);
  ensure(rez[1]==   2*c(1)+3*C(1));
  ensure(rez[2]==   c(1)^2+5*c(1)*C(1)+3*C(1)^2+2*c(2)+3*C(2));
  ensure(rez[3]==   2*c(1)^2*C(1)+4*c(1)*C(1)^2+C(1)^3+2*c(1)*c(2)+4*c(2)*C(1)+4*c(1)*C(2)+6*C(1)*C(2)+2*c(3));
  ensure(rez[4]==   c(1)^2*C(1)^2+c(1)*C(1)^3+3*c(1)*c(2)*C(1)+3*c(2)*C(1)^2+2*c(1)^2*C(2)+6*c(1)*C(1)*C(2)+3*C(1)^2*C(2)+c(2)^2+2*c(1)*c(3)+3*c(3)*C(1)+3*C(2)^2);
  ensure(rez[5]==   c(1)*c(2)*C(1)^2+c(2)*C(1)^3+2*c(1)^2*C(1)*C(2)+2*c(1)*C(1)^2*C(2)+c(2)^2*C(1)+2*c(1)*c(3)*C(1)+3*c(3)*C(1)^2+2*c(1)*c(2)*C(2)+2*c(1)*C(2)^2+3*C(1)*C(2)^2+2*c(2)*c(3)-6*c(3)*C(2));
  ensure(rez[6]==   c(1)*c(3)*C(1)^2+c(3)*C(1)^3+c(1)*c(2)*C(1)*C(2)+c(2)*C(1)^2*C(2)+c(1)^2*C(2)^2+c(1)*C(1)*C(2)^2+c(2)*c(3)*C(1)+c(2)^2*C(2)-2*c(1)*c(3)*C(2)-3*c(3)*C(1)*C(2)-2*c(2)*C(2)^2+C(2)^3+c(3)^2);
  return(check(s));
}

proc test_chProdL()
{
  string s="chProdL()";
  // The Chern classes of the tensor product of a vector bundle of rank 3
  // with Chern classes c(1), c(2), c(3) and a vector bundle of rank 1 with
  // Chern class C(1)
  ring r = 0, ( c(1..3), C(1)), dp;
  list c=c(1..3);
  list C=C(1);
  list rez= chProdL(3,c,1,C);
  ensure(rez[1]==  c(1)+3*C(1));
  ensure(rez[2]==  2*c(1)*C(1)+3*C(1)^2+c(2));
  ensure(rez[3]==  c(1)*C(1)^2+C(1)^3+c(2)*C(1)+c(3));
  return(check(s));
}


proc test_chProdLP()
{
  string s="chProdLP()";
  // The total Chern class of the tensor product of a vector bundle of rank 3
  // with Chern classes c(1), c(2), c(3) and a vector bundle of rank 1 with
  // Chern class C(1)
  ring r = 0, ( c(1..3), C(1)), ws(1,2,3, 1);
  list c=c(1..3);
  list C=C(1);
  poly rez= chProdLP(3,c,1,C);
  ensure(rez==1+c(1)+3*C(1)+c(2)+2*c(1)*C(1)+3*C(1)^2+c(3)+c(2)*C(1)+c(1)*C(1)^2+C(1)^3);
  return(check(s));
}

proc test_chProdM()
{
  string s="chProdM()";
  // The Chern classes of the tensor product of a vector bundle of rank 3
  // with Chern classes c(1), c(2), c(3) and a vector bundle of rank 1 with
  // Chern class C(1)
  ring r = 0, ( c(1..3), C(1)), dp;
  list c=c(1..3);
  list C=C(1);
  list rez= chProdM(3,c,1,C);
  ensure(rez[1]==  c(1)+3*C(1));
  ensure(rez[2]==  2*c(1)*C(1)+3*C(1)^2+c(2));
  ensure(rez[3]==  c(1)*C(1)^2+C(1)^3+c(2)*C(1)+c(3));
  return(check(s));
}


proc test_chProdMP()
{
  string s="chProdMP()";
  // The total Chern class of the tensor product of a vector bundle of rank 3
  // with Chern classes c(1), c(2), c(3) and a vector bundle of rank 1 with
  // Chern class C(1)
  ring r = 0, ( c(1..3), C(1)), ws(1,2,3, 1);
  list c=c(1..3);
  list C=C(1);
  poly rez= chProdMP(3,c,1,C);
  ensure(rez==1+c(1)+3*C(1)+c(2)+2*c(1)*C(1)+3*C(1)^2+c(3)+c(2)*C(1)+c(1)*C(1)^2+C(1)^3);
  return(check(s));
}

proc test_ChernRootsHom()
{
  string s="ChernRootsHom()";
  ring r=0, (a(1..2), b(1..3)), dp;
  list l=a(1..2);
  list L=b(1..3);
  // Let E be a vector bundle with Chern roots a(1). a(2),
  // let F be a vector bundle with CHern roots b(1), b(2), b(3).
  // Then the Chern roots of Hom(E, F) are
  list rez=ChernRootsHom(l, L);
  ensure(rez[1]== -a(1)+b(1));
  ensure(rez[2]==   -a(1)+b(2));
  ensure(rez[3]==   -a(1)+b(3));
  ensure(rez[4]==   -a(2)+b(1));
  ensure(rez[5]==   -a(2)+b(2));
  ensure(rez[6]==   -a(2)+b(3));
  return(check(s));

}

proc test_chHom()
{
  string s="chHom()";
  ring H = 0, ( r, R, c(1..3), C(1..2) ), dp;
  list l=c(1..3);
  list L=C(1..2);
  // the Chern classes of Hom(E, F) for a vector bundle E of rank 3
  // with Chern classes c(1), c(2), c(3)
  // and a vector bundle F of rank 2 with Chern classes C(1) and C(2):
  list rez= chHom(3, l, 2, L);
  ensure(rez[1]==  -2*c(1)+3*C(1));
  ensure(rez[2]==  c(1)^2-5*c(1)*C(1)+3*C(1)^2+2*c(2)+3*C(2));
  ensure(rez[3]==  2*c(1)^2*C(1)-4*c(1)*C(1)^2+C(1)^3-2*c(1)*c(2)+4*c(2)*C(1)-4*c(1)*C(2)+6*C(1)*C(2)-2*c(3));
  ensure(rez[4]==  c(1)^2*C(1)^2-c(1)*C(1)^3-3*c(1)*c(2)*C(1)+3*c(2)*C(1)^2+2*c(1)^2*C(2)-6*c(1)*C(1)*C(2)+3*C(1)^2*C(2)+c(2)^2+2*c(1)*c(3)-3*c(3)*C(1)+3*C(2)^2);
  ensure(rez[5]==  -c(1)*c(2)*C(1)^2+c(2)*C(1)^3+2*c(1)^2*C(1)*C(2)-2*c(1)*C(1)^2*C(2)+c(2)^2*C(1)+2*c(1)*c(3)*C(1)-3*c(3)*C(1)^2-2*c(1)*c(2)*C(2)-2*c(1)*C(2)^2+3*C(1)*C(2)^2-2*c(2)*c(3)+6*c(3)*C(2));
  ensure(rez[6]==  c(1)*c(3)*C(1)^2-c(3)*C(1)^3-c(1)*c(2)*C(1)*C(2)+c(2)*C(1)^2*C(2)+c(1)^2*C(2)^2-c(1)*C(1)*C(2)^2-c(2)*c(3)*C(1)+c(2)^2*C(2)-2*c(1)*c(3)*C(2)+3*c(3)*C(1)*C(2)-2*c(2)*C(2)^2+C(2)^3+c(3)^2);
  
  // the first two Chern classes of Hom(E, F) for a vector bundle E of rank r
  // with Chern classes c(1) and c(2)
  // and a vector bundle G of rank R with Chern classes C(1) and C(2)
  // this gives the Chern classes of a tensor product on a complex surface
  l=c(1..2);
  L=C(1..2);
  rez= chHom(r, l, R, L, 2 ) ;
  ensure(rez[1]==  -R*c(1)+r*C(1));
  ensure(rez[2]==   1/2*R^2*c(1)^2-r*R*c(1)*C(1)+1/2*r^2*C(1)^2-1/2*R*c(1)^2-1/2*r*C(1)^2+R*c(2)+c(1)*C(1)+r*C(2));
  return(check(s));
}

proc test_ChernRootsSymm()
{
  string s="ChernRootsSymm()"; 
  ring r=0, (a(1..3)), dp;
  list l=a(1..3);
  // the Chern roots of the second symmetric power of a vector bundle
  // with Chern  roots a(1), a(2), a(3)
  list rez= ChernRootsSymm(2, l) ;
  ensure(rez[1]==   2*a(1));
  ensure(rez[2]==   a(1)+a(2));
  ensure(rez[3]==   a(1)+a(3));
  ensure(rez[4]==   2*a(2));
  ensure(rez[5]==   a(2)+a(3));
  ensure(rez[6]==   2*a(3));
  return(check(s));
}

proc test_ChernRootsWedge()
{
  string s="ChernRootsWedge()";
  ring r=0, (a(1..3)), dp;
  list l=a(1..3);
  // the Chern roots of the second exterior power of a vector bundle
  // with Chern  roots a(1), a(2), a(3)
  list rez= ChernRootsWedge(2, l);
  ensure(rez[1]== a(2)+a(3));
  ensure(rez[2]==   a(1)+a(3));
  ensure(rez[3]==   a(1)+a(2));
  return(check(s));
}

proc test_chSymm()
{
  string s="chSymm()";
  ring r=0, (c(1..5)), dp;
  list l=c(1..5);
  // the rank and the Chern classes of the second symmetric power of a vector bundle of rank 3
  list rez= chSymm(2, 3, l);
  // the rank should be 6
  ensure(rez[1]==   6);
  rez=rez[2];
  ensure(rez[1]== 4*c(1));
  ensure(rez[2]== 5*c(1)^2+5*c(2));
  ensure(rez[3]== 2*c(1)^3+11*c(1)*c(2)+7*c(3));
  ensure(rez[4]== 6*c(1)^2*c(2)+4*c(2)^2+14*c(1)*c(3));
  ensure(rez[5]== 4*c(1)*c(2)^2+8*c(1)^2*c(3)+4*c(2)*c(3));
  ensure(rez[6]== 8*c(1)*c(2)*c(3)-8*c(3)^2);
  // the rank and the first 3 Chern classes
  // of the second symmetric power of a vector bundle of rank 5
  rez= chSymm(2, 5, l, 1, 2, 3);
  ensure(rez[1]==   15);
  rez=rez[2];
  ensure(rez[1]== 6*c(1));
  ensure(rez[2]== 14*c(1)^2+7*c(2));
  ensure(rez[3]== 16*c(1)^3+31*c(1)*c(2)+9*c(3));
  return(check(s));
}

proc test_chSymm2L()
{
  string s="chSymm2L()";
  ring r=0, (c(1..2)), dp;
  list l=c(1..2);
  // the Chern classes of the second symmetric power of a vector bundle of rank 2
  list rez= chSymm2L(2, l);
  ensure(rez[1]== 3);
  rez=rez[2];
  ensure(rez[1]== 3*c(1));
  ensure(rez[2]== 2*c(1)^2+4*c(2));
  ensure(rez[3]== 4*c(1)*c(2));
  return(check(s));
}

proc test_chSymm2LP()
{
  string s="chSymm2LP()";
  ring r=0, (c(1..2)), ws(1, 2);
  list l=c(1..2);
  // the total Chern class of the second symmetric power of a vector bundle of rank 2
  poly rez=chSymm2LP(2, l);
  ensure(rez==1+3*c(1)+2*c(1)^2+4*c(2)+4*c(1)*c(2));
  return(check(s));
}


proc test_chWedge()
{
  string s="chWedge()";
  ring r=0, (c(1..5)), dp;
  list l=c(1..5);
  // the rank and the Chern classes of the second exterior power of a vector bundle of rank 3
  list rez=chWedge(2, 3, l);
  ensure(rez[1]== 3);
  rez=rez[2];
  ensure(rez[1]== 2*c(1));
  ensure(rez[2]== c(1)^2+c(2));
  ensure(rez[3]== c(1)*c(2)-c(3));
  // the rank and the first 3 Chern classes
  // of the fourth exterior power of a vector bundle of rank 5
  rez= chWedge(4, 5, l, 1, 2, 3);
  ensure(rez[1]== 5);
  rez=rez[2];
  ensure(rez[1]==4*c(1));
  ensure(rez[2]==6*c(1)^2+c(2));
  ensure(rez[3]==  4*c(1)^3+3*c(1)*c(2)-c(3));
  return(check(s));
}

proc test_chWedge2L()
{
  string s="chWedge2L()";
  ring r=0, (c(1..3)), dp;
  list l=c(1..3);
  // the Chern classes of the second exterior power of a vector bundle of rank 3
  list rez=chWedge2L(3, l);
  ensure(rez[1]== 3);
  rez=rez[2];
  ensure(rez[1]== 2*c(1));
  ensure(rez[2]== c(1)^2+c(2));
  ensure(rez[3]== c(1)*c(2)-c(3));
  return(check(s));
}

proc test_chWedge2LP()
{
string s="chWedge2LP()";
  ring r=0, (c(1..3)), ws(1,2,3);
  list l=c(1..3);
  // the total Chern class of the second exterior power of a vector bundle of rank 3
  poly rez=chWedge2LP(3, l);
  ensure(rez==1+2*c(1)+c(1)^2+c(2)+c(1)*c(2)-c(3) );
  return(check(s));
}

proc test_todd()
{
  string s="todd()";
  // the terms of the Todd class up to degree 5
  // in terms of the Chern classes c(1), c(2), c(3), c(4), c(5)
  ring r=0, (c(1..5)), dp;
  list l=c(1..5);
  list rez= todd( l );
  ensure(rez[1]== 1/2*c(1));
  ensure(rez[2]==  1/12*c(1)^2+1/12*c(2));
  ensure(rez[3]== 1/24*c(1)*c(2));
  ensure(rez[4]==   -1/720*c(1)^4+1/180*c(1)^2*c(2)+1/240*c(2)^2+1/720*c(1)*c(3)-1/720*c(4));
  ensure(rez[5]==   -1/1440*c(1)^3*c(2)+1/480*c(1)*c(2)^2+1/1440*c(1)^2*c(3)-1/1440*c(1)*c(4));
  // in the same situation compute only first two terms
  rez= todd(l, 2);
  ensure(rez[1]== 1/2*c(1));
  ensure(rez[2]==  1/12*c(1)^2+1/12*c(2));

  // compute the first 5 terms corresponding to the Chern classes c(1), c(2)
  l=c(1..2);
  rez= todd(l, 5) ;
  ensure(rez[1]==  1/2*c(1));
  ensure(rez[2]==    1/12*c(1)^2+1/12*c(2));
  ensure(rez[3]==   1/24*c(1)*c(2));
  ensure(rez[4]==   -1/720*c(1)^4+1/180*c(1)^2*c(2)+1/240*c(2)^2);
  ensure(rez[5]==   -1/1440*c(1)^3*c(2)+1/480*c(1)*c(2)^2);
  return(check(s));
}


proc test_toddE()
{
  string s="toddE()";
  // first  3 terms of the Todd class in terms of the Chern classes c(1), c(2), c(3)
  ring r=0, (c(1..3)), dp;
  list l;
  //first term
  l=c(1);
  poly rez= toddE( l );
  ensure(rez==1/2*c(1));
  // second term
  l=c(1..2);
  rez= toddE( l );
  ensure(rez== 1/12*c(1)^2+1/12*c(2));
  // third term
  l=c(1..3);
  rez= toddE( l );
  ensure(rez==1/24*c(1)*c(2));
  return(check(s));
}

proc test_Bern()
{
  string s="Bern()";
  // first 10 Bernoulli numbers: B(0), ..., B(9)
  ring r=0,(t), dp;
  list rez= Bern(9);
  ensure(rez[1]==1);
  ensure(rez[2]==1/2);
  ensure(rez[3]==1/6);
  ensure(rez[4]==0);
  ensure(rez[5]==-1/30);
  ensure(rez[6]==0);
  ensure(rez[7]==1/42);
  ensure(rez[8]==0);
  ensure(rez[9]==-1/30);
  ensure(rez[10]==0);
  return(check(s));
}

proc test_tdCf()
{
  string s="tdCf()"; 
  // first 5 coefficients
  ring r=0,(t), dp;
  list rez= tdCf(4);
  ensure(rez[1]==1);
  ensure(rez[2]==1/2);
  ensure(rez[3]==1/12);
  ensure(rez[4]==0);
  ensure(rez[5]==-1/720);
  return(check(s));
}

proc test_tdTerms()
{
  string s="tdTerms()";
  ring r=0, (t), ls;;
  // the terms of the Todd class of a line bundle with Chern root t up to degree 4
  list rez=tdTerms(4, t);
  ensure(rez[1]== 1);
  ensure(rez[2]==   1/2t);
  ensure(rez[3]==   1/12t2);
  ensure(rez[4]==   0);
  ensure(rez[5]==   -1/720t4);
  return(check(s));
}

proc test_tdFactor()
{
  string s="tdFactor()"; 
  // the Todd class up do degree 4
  ring r=0,(t), ls;
  poly rez= tdFactor(4, t);
  ensure(rez==1+1/2t+1/12t2-1/720t4);
  return(check(s));
}

proc test_cProj()
{
  string s="cProj()";
  ring r=0, (t), dp;
  // the coefficients of the total Chern class of the complex projective line
  list rez= cProj(1);
  ensure(rez[1]==   2);
  // the coefficients of the total Chern class of the complex projective plane
  rez= cProj(2) ;
  ensure(rez[1]==   3);
  ensure(rez[2]==   3);
  // the coefficients of the total Chern class of the complex projective space
  // of dimension three
  rez= cProj(3) ;
  ensure(rez[1]==   4);
  ensure(rez[2]==   6);
  ensure(rez[3]==   4);
  return(check(s));
}

proc test_chProj()
{
  string s="chProj()";
  ring r=0, (t), dp;
  // the coefficients of the Chern character of the complex projective line
  list rez= chProj(1);
  ensure(rez[1]==1);
  ensure(rez[2]==2);
  // the coefficients of the Chern character of the complex projective plane
  rez= chProj(2) ;
  ensure(rez[1]==2);
  ensure(rez[2]==3);
  ensure(rez[3]==3/2);
  // the coefficients of the Chern character of the complex 3-dimentional projectice space
  rez=chProj(3);
  ensure(rez[1]==3);
  ensure(rez[2]==4);
  ensure(rez[3]==2);
  ensure(rez[4]==2/3);
  return(check(s));
}

proc test_tdProj()
{
  string s="tdProj()";
  ring r=0, (t), dp;
  // the coefficients of the Todd class of the complex projective line
  list rez= tdProj(1);
  ensure(rez[1]==   1);
  ensure(rez[2]==   1);
  // the coefficients of the Todd class of the complex projective line
  rez= tdProj(2);
  ensure(rez[1]==   1);
  ensure(rez[2]==   3/2);
  ensure(rez[3]==   1);
  // the coefficients of the Todd class of the complex projective line
  rez= tdProj(3);
  ensure(rez[1]==  1);
  ensure(rez[2]==   2);
  ensure(rez[3]==   11/6);
  ensure(rez[4]==   1);
  return(check(s));
}

proc test_eulerChProj()
{
  string s="eulerChProj()";
  ring h=0, (r, c(1..3)),  ws(0,1,2,3);
  list l=c(1..3);

  // the Euler characteristic of a vector bundle on the projective line
  poly rez= eulerChProj(1, r, l);
  ensure(rez==r+c(1));

  // the Euler characteristic of a vector bundle on the projective plane
  rez= eulerChProj(2, r, l);
  ensure(rez==r+3/2*c(1)+1/2*c(1)^2-c(2));

  // the Euler characteristic of a vector bundle on P_3
  rez= eulerChProj(3, r, l);
  ensure(rez==r+11/6*c(1)+c(1)^2-2*c(2)+1/6*c(1)^3-1/2*c(1)*c(2)+1/2*c(3));

  // assume now that we have a bundle framed at a subplane of P_3
  // this implies c(1)=c(2)=0
  l= 0, 0, c(3);

  // the Euler characteristic is
  rez= eulerChProj(3, r, l);
  ensure(rez==r+1/2*c(3));
  // which implies that c(3) must be even in this case
  return(check(s));
}

proc test_chNumbersProj()
{
  string s="chNumbersProj()";
  ring h=0, (t), dp;
  // The Chern numbers of the projective plane P_2:
  list rez= chNumbersProj(2) ;
  ensure(rez[1]==9);
  ensure(rez[2]==   3);

  // The Chern numbers of P_3:
  rez=chNumbersProj(3);
  ensure(rez[1]==   64);
  ensure(rez[2]==   24);
  ensure(rez[3]==   4);
  return(check(s));
}

proc test_classpoly()
{
  string s="classpoly()";
  ring r=0, (c(1..5), t), ds;
  list l=c(1..5);
  // get the polynomial c(1)*t + c(2)*t^2 + ... + c(5)*t^5
  poly rez= classpoly(l, t);
  ensure(rez==c(1)*t+c(2)*t^2+c(3)*t^3+c(4)*t^4+c(5)*t^5);
  return(check(s));
}

proc test_chernPoly()
{
  string s="chernPoly()"; 
  ring r=0, (c(1..5), t), ds;
  list l=c(1..5);
  // get the Chern polynomial 1 + c(1)*t + c(2)*t^2 + ... + c(5)*t^5
  poly rez= chernPoly(l, t);
  ensure(rez==1+c(1)*t+c(2)*t^2+c(3)*t^3+c(4)*t^4+c(5)*t^5);
  return(check(s));
}

proc test_chernCharPoly()
{
  string s="chernCharPoly()";
  ring h=0, (r, ch(1..5), t), ds;
  list l=ch(1..5);
  // get the polynomial r + ch(1)*t + ch(2)*t^2 + ... + ch(5)*t^5
  poly rez= chernCharPoly(r, l, t);
  ensure(rez==r+ch(1)*t+ch(2)*t^2+ch(3)*t^3+ch(4)*t^4+ch(5)*t^5);
  return(check(s));
}

proc test_toddPoly()
{
  string s="toddPoly()";
  ring r=0, (td(1..5), c(1..5), t), ds;
  list l=td(1..5);
  // get the polynomial 1 + td(1)*t + td(2)*t^2 + ... + td(5)*t^5
  poly rez= toddPoly(l, t);
  ensure(rez==1+td(1)*t+td(2)*t^2+td(3)*t^3+td(4)*t^4+td(5)*t^5);
  return(check(s));
}

proc test_rHRR()
{
  string s="rHRR()";
  ring r=0, (td(0..3), ch(0..3)), dp;
  // Let ch(0), ch(1), ch(2), ch(3) be the terms of the Chern character
  // of a vector bundle E on a 3-fold X.
  list c = ch(0..3);
  // Let td(0), td(1), td(2), td(3) be the terms of the Todd class of X.
  list t = td(0..3);
  // Then the highest term of the product ch(E).td(X) is:
  poly rez= rHRR(3, c, t);
  ensure(rez==td(3)*ch(0)+td(2)*ch(1)+td(1)*ch(2)+td(0)*ch(3));
  return(check(s));
}

proc test_SchurS()
{
  string s="SchurS()";
  // The Schur polynomial corresponding to the partition 1,2,4
  // and the Segre classes 1, s(1), s(2),..., s(6)
  ring r=0,(s(1..6)), dp;
  list I=1,2,4;
  list S=s(1..6);
  poly rez=SchurS(I, S);
  ensure(rez==s(1)*s(2)*s(4)-s(1)^2*s(5)-s(3)*s(4)+s(1)*s(6));
  // compare this with the Schur polynomial computed using Chern classes
  list C=chDual(chern(S));
  rez= SchurCh(I, C) ;
  ensure(rez==s(1)*s(2)*s(4)-s(1)^2*s(5)-s(3)*s(4)+s(1)*s(6));
  return(check(s));
}

proc test_SchurCh()
{
  string s="SchurCh()";
  // The Schur polynomial corresponding to the partition 1,2,4
  // and the Chern classes c(1), c(2), c(3)
  ring r=0,(c(1..3)), dp;
  list I=1,2,4;
  list C=c(1..3);
  poly rez= SchurCh(I, C);
  ensure(rez==c(1)^2*c(2)*c(3)-c(2)^2*c(3)-c(1)*c(3)^2);
  // Compare this with the Schur polynomial computed using Segre classes
  list S=segre( chDual( list(c(1..3)) ), 6 );
  rez=SchurS(I,S);
  ensure(rez==  c(1)^2*c(2)*c(3)-c(2)^2*c(3)-c(1)*c(3)^2);
  return(check(s));
}

proc test_part()
{
  string s="part()";
  // partitions into 3 summands of numbers not exceeding 1
  list rez= part(3, 1);
  ensure(rez[1][1]==      0);
  ensure(rez[1][2]==      0);
  ensure(rez[1][3]==      0);

  ensure(rez[2][1]==      0);
  ensure(rez[2][2]==      0);
  ensure(rez[2][3]==      1);

  ensure(rez[3][1]==      0);
  ensure(rez[3][2]==      1);
  ensure(rez[3][3]==      1);

  ensure(rez[4][1]==      1);
  ensure(rez[4][2]==      1);
  ensure(rez[4][3]==      1);

  return(check(s));
}



proc test_dualPart()
{
  string s="dualPart()";
  // dual partition to (1, 3, 4):
  list I = 1, 3, 4;
  list rez= dualPart(I);
  ensure(rez[1]==   1);
  ensure(rez[2]==   2);
  ensure(rez[3]==   2);
  ensure(rez[4]==   3);
  return(check(s));
}

proc test_PartC()
{
  string s="PartC()";
  // Complement of the partition (1, 3, 4) with respect to 5
  list I = 1, 3, 4;
  list rez= PartC(I, 5);
  ensure(rez[1]==  1);
  ensure(rez[2]==   2);
  ensure(rez[3]==   4);
  return(check(s));
}

proc test_partOver()
{
  string s="partOver()";
  // Partitions over the partition (3, 3, 4) with summands not exceeding 4
  list I = 3, 3, 4;
  list rez= partOver(4, I);
  ensure(rez[1][1] == 3);
  ensure(rez[1][2] == 3);
  ensure(rez[1][3] == 4);

  ensure(rez[2][1] == 3);
  ensure(rez[2][2] == 4);
  ensure(rez[2][3] == 4);

  ensure(rez[3][1] == 4);
  ensure(rez[3][2] == 4);
  ensure(rez[3][3] == 4);
  return(check(s));
}


proc test_partUnder()
{
  string s="partUnder()";
  // Partitions under the partition (0, 1, 1)
  list I = 0, 1, 1;
  list rez= partUnder(I);
  ensure(rez[1][1] == 0);
  ensure(rez[1][2] == 0);
  ensure(rez[1][3] == 0);

  ensure(rez[2][1] == 0);
  ensure(rez[2][2] == 0);
  ensure(rez[2][3] == 1);

  ensure(rez[3][1] == 0);
  ensure(rez[3][2] == 1);
  ensure(rez[3][3] == 1);
  return(check(s));
}

proc test_SegreA()
{
  string s="SegreA()";
  // Consider a 3-dimensional projective space
  ring r = 0, (x, y, z, w), dp;
  // Consider 3 non-coplanar lines trough one point and compute the Segre class
  ideal I=xy, xz, yz;
  list rez=SegreA(I);
  ensure(rez[1]==   0);
  ensure(rez[2]==   0);
  ensure(rez[3]==   3);
  ensure(rez[4]==   -10);
  // Now consider 3 coplanar lines trough one point and its Segre class
  ideal J=w, x*y*(x+y);
  rez=SegreA(J);
  ensure(rez[1]==   0);
  ensure(rez[2]==   0);
  ensure(rez[3]==   3);
  ensure(rez[4]==   -12);
  return(check(s));
}

proc test_FultonA()
{
  string s="FultonA()";
  // Consider a 3-dimensional projective space
  ring r = 0, (x, y, z, w), dp;
  // Consider 3 non-coplanar lines trough one point and compute the Fulton class
  ideal I=xy, xz, yz;
  list rez=FultonA(I);
  ensure(rez[1]==   0);
  ensure(rez[2]==   0);
  ensure(rez[3]==   3);
  ensure(rez[4]==   2);
  // Now consider 3 coplanar lines trough one point and its Fulton class
  ideal J=w, x*y*(x+y);
  rez=FultonA(J);
  ensure(rez[1]==   0);
  ensure(rez[2]==   0);
  ensure(rez[3]==   3);
  ensure(rez[4]==   0);
  return(check(s));
}


proc test_CSMA()
{
  string s="CSMA()";
  // consider the projective plane with homogeneous coordinates x, y, z
  ring r = 0, (x, y, z), dp;
  // the Chern-Schwartz-MacPherson class of a smooth cubic:
  ideal I=x3+y3+z3;
  list rez=CSMA(I);
  ensure(rez[1]==   0);
  ensure(rez[2]==   3);
  ensure(rez[3]==   0);
  // the Chern-Schwartz-MacPherson class of singular cubic
  // that is a union of 3 non-collinear lines:
  ideal J=x*y*z;
  rez= CSMA(J);
  ensure(rez[1]==   0);
  ensure(rez[2]==   3);
  ensure(rez[3]==   3);
  // the Chern-Schwartz-MacPherson class of singular cubic
  // that is a union of 3 lines passing through one point
  ideal K=x*y*(x+y);
  rez=CSMA(K);
  ensure(rez[1]==   0);
  ensure(rez[2]==   3);
  ensure(rez[3]==   4);
  return(check(s));
}

proc test_EulerAff()
{
  string s="EulerAff()";
  ring r = 0, (x, y), dp;
  // compute the Euler characteristic of the affine ellipric curve y^2=x^3+x+1;
  ideal I=y2-x3-x-1;
  ensure(EulerAff(I)==-1);
  return(check(s));
}

proc test_EulerAffBugFix()
{
  string s="EulerAffBugFix()";
  ring r = 0, (a, b, c, d), dp;
  // compute the Euler characteristic of the affine ellipric curve a3+b3+c3+d3+2*b*d=0;
  ideal I=a3+b3+c3+d3+2*b*d;
  ensure(EulerAff(I)==-11);
  return(check(s));
}


proc test_EulerProj()
{
  string s="EulerProj()";
  // consider the projective plane with homogeneous coordinates x, y, z
  ring r = 0, (x, y, z), dp;
  // Euler characteristic of a smooth cubic:
  ideal I=x3+y3+z3;
  ensure(EulerProj(I)==0);
  // Euler characteritic of 3 non-collinear lines:
  ideal J=x*y*z;
  ensure(EulerProj(J)==3);
  // Euler characteristic of 3 lines passing through one point
  ideal K=x*y*(x+y);
  ensure(EulerProj(K)==4);
  return(check(s));
}

proc test_full()
{
return(
test_symm()*
test_symNsym()*
test_CompleteHomog()*
test_segre()*
test_chern()*
test_chNum()*
test_chNumbers()*
test_sum_of_powers()*
test_powSumSym()*
test_chAll()*
test_chAllInv()*
test_chHE()*
test_ChernRootsSum()*
test_chSum()*
test_ChernRootsDual()*
test_chDual()*
test_ChernRootsProd()*
test_chProd()*
test_chProdE()*
test_chProdL()*
test_chProdLP()*
test_chProdM()*
test_chProdMP()*
test_ChernRootsHom()*
test_chHom()*
test_ChernRootsSymm()*
test_ChernRootsWedge()*
test_chSymm()*
test_chSymm2L()*
test_chSymm2LP()*
test_chWedge()*
test_chWedge2L()*
test_chWedge2LP()*
test_todd()*
test_toddE()*
test_Bern()*
test_tdCf()*
test_tdTerms()*
test_tdFactor()*
test_cProj()*
test_chProj()*
test_tdProj()*
test_eulerChProj()*
test_chNumbersProj()*
test_classpoly()*
test_chernPoly()*
test_chernCharPoly()*
test_toddPoly()*
test_rHRR()*
test_SchurS()*
test_SchurCh()*
test_part()*
test_dualPart()*
test_PartC()*
test_partOver()*
test_partUnder()*
test_SegreA()*
test_FultonA()*
test_CSMA()*
test_EulerAff()*
test_EulerAffBugFix()*
test_EulerProj()
);
}
test_full();
$

test_symm();
test_symNsym();
test_CompleteHomog();
test_segre();
test_chern();
test_chNum();
test_chNumbers();
test_sum_of_powers();
test_powSumSym();
test_chAll();
test_chAllInv();
test_chHE();
test_ChernRootsSum();
test_chSum();
test_ChernRootsDual();
test_chDual();
test_ChernRootsProd();
test_chProd();
test_chProdE();
test_chProdL();
test_chProdLP();
test_chProdM();
test_chProdMP();
test_ChernRootsHom();
test_chHom();
test_ChernRootsSymm();
test_ChernRootsWedge();
test_chSymm();
test_chSymm2L();
test_chSymm2LP();
test_chWedge();
test_chWedge2L();
test_chWedge2LP();
test_todd();
test_toddE();
test_Bern();
test_tdCf();
test_tdTerms();
test_tdFactor();
test_cProj();
test_chProj();
test_tdProj();
test_eulerChProj();
test_chNumbersProj();
test_classpoly();
test_chernPoly();
test_chernCharPoly();
test_toddPoly();
test_rHRR();
test_SchurS();
test_SchurCh();
test_part();
test_dualPart();
test_PartC();
test_partOver();
test_partUnder();
test_SegreA();
test_FultonA();
test_CSMA();
test_EulerAff();
test_EulerProj();